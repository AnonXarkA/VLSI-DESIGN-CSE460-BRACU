// Copyright (C) 1991-2008 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// VENDOR "Altera"
// PROGRAM "Quartus II"
// VERSION "Version 8.1 Build 163 10/28/2008 SJ Web Edition"

// DATE "02/12/2023 23:39:00"

// 
// Device: Altera EPF10K30ETC144-1 Package TQFP144
// 

// 
// This Verilog file should be used for Custom Verilog HDL only
// 

`timescale 1 ps/ 1 ps

module lab2 (
	a,
	sel,
	b);
input 	[7:0] a;
input 	[2:0] sel;
output 	b;

wire gnd = 1'b0;
wire vcc = 1'b1;

tri1 devclrn;
tri1 devpor;
tri1 devoe;
// synopsys translate_off
initial $sdf_annotate("lab2_v.sdo");
// synopsys translate_on

wire \b~35_combout ;
wire \b~36_combout ;
wire \b~37_combout ;
wire \b~38_combout ;
wire \b~39_combout ;
wire [7:0] \a~dataout ;
wire [2:0] \sel~dataout ;


// atom is at PIN_54
flex10ke_io \a[5]~I (
	.datain(gnd),
	.clk(gnd),
	.ena(vcc),
	.aclr(gnd),
	.oe(gnd),
	.devclrn(devclrn),
	.devpor(devpor),
	.devoe(devoe),
	.dataout(\a~dataout [5]),
	.padio(a[5]));
// synopsys translate_off
defparam \a[5]~I .feedback_mode = "from_pin";
defparam \a[5]~I .operation_mode = "input";
defparam \a[5]~I .reg_source_mode = "none";
// synopsys translate_on

// atom is at PIN_23
flex10ke_io \a[2]~I (
	.datain(gnd),
	.clk(gnd),
	.ena(vcc),
	.aclr(gnd),
	.oe(gnd),
	.devclrn(devclrn),
	.devpor(devpor),
	.devoe(devoe),
	.dataout(\a~dataout [2]),
	.padio(a[2]));
// synopsys translate_off
defparam \a[2]~I .feedback_mode = "from_pin";
defparam \a[2]~I .operation_mode = "input";
defparam \a[2]~I .reg_source_mode = "none";
// synopsys translate_on

// atom is at PIN_126
flex10ke_io \sel[2]~I (
	.datain(gnd),
	.clk(gnd),
	.ena(vcc),
	.aclr(gnd),
	.oe(gnd),
	.devclrn(devclrn),
	.devpor(devpor),
	.devoe(devoe),
	.dataout(\sel~dataout [2]),
	.padio(sel[2]));
// synopsys translate_off
defparam \sel[2]~I .feedback_mode = "from_pin";
defparam \sel[2]~I .operation_mode = "input";
defparam \sel[2]~I .reg_source_mode = "none";
// synopsys translate_on

// atom is at PIN_56
flex10ke_io \a[3]~I (
	.datain(gnd),
	.clk(gnd),
	.ena(vcc),
	.aclr(gnd),
	.oe(gnd),
	.devclrn(devclrn),
	.devpor(devpor),
	.devoe(devoe),
	.dataout(\a~dataout [3]),
	.padio(a[3]));
// synopsys translate_off
defparam \a[3]~I .feedback_mode = "from_pin";
defparam \a[3]~I .operation_mode = "input";
defparam \a[3]~I .reg_source_mode = "none";
// synopsys translate_on

// atom is at PIN_124
flex10ke_io \sel[1]~I (
	.datain(gnd),
	.clk(gnd),
	.ena(vcc),
	.aclr(gnd),
	.oe(gnd),
	.devclrn(devclrn),
	.devpor(devpor),
	.devoe(devoe),
	.dataout(\sel~dataout [1]),
	.padio(sel[1]));
// synopsys translate_off
defparam \sel[1]~I .feedback_mode = "from_pin";
defparam \sel[1]~I .operation_mode = "input";
defparam \sel[1]~I .reg_source_mode = "none";
// synopsys translate_on

// atom is at PIN_125
flex10ke_io \a[1]~I (
	.datain(gnd),
	.clk(gnd),
	.ena(vcc),
	.aclr(gnd),
	.oe(gnd),
	.devclrn(devclrn),
	.devpor(devpor),
	.devoe(devoe),
	.dataout(\a~dataout [1]),
	.padio(a[1]));
// synopsys translate_off
defparam \a[1]~I .feedback_mode = "from_pin";
defparam \a[1]~I .operation_mode = "input";
defparam \a[1]~I .reg_source_mode = "none";
// synopsys translate_on

// atom is at LC1_D7
flex10ke_lcell \b~35 (
// Equation(s):
// \b~35_combout  = \sel~dataout [2] & (\sel~dataout [1]) # !\sel~dataout [2] & (\sel~dataout [1] & \a~dataout [3] # !\sel~dataout [1] & (\a~dataout [1]))

	.dataa(\sel~dataout [2]),
	.datab(\a~dataout [3]),
	.datac(\sel~dataout [1]),
	.datad(\a~dataout [1]),
	.aclr(gnd),
	.aload(gnd),
	.clk(gnd),
	.cin(gnd),
	.cascin(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.combout(\b~35_combout ),
	.regout(),
	.cout(),
	.cascout());
// synopsys translate_off
defparam \b~35 .clock_enable_mode = "false";
defparam \b~35 .lut_mask = "e5e0";
defparam \b~35 .operation_mode = "normal";
defparam \b~35 .output_mode = "comb_only";
defparam \b~35 .packed_mode = "false";
// synopsys translate_on

// atom is at PIN_55
flex10ke_io \a[7]~I (
	.datain(gnd),
	.clk(gnd),
	.ena(vcc),
	.aclr(gnd),
	.oe(gnd),
	.devclrn(devclrn),
	.devpor(devpor),
	.devoe(devoe),
	.dataout(\a~dataout [7]),
	.padio(a[7]));
// synopsys translate_off
defparam \a[7]~I .feedback_mode = "from_pin";
defparam \a[7]~I .operation_mode = "input";
defparam \a[7]~I .reg_source_mode = "none";
// synopsys translate_on

// atom is at LC2_D7
flex10ke_lcell \b~36 (
// Equation(s):
// \b~36_combout  = \sel~dataout [2] & (\b~35_combout  & (\a~dataout [7]) # !\b~35_combout  & \a~dataout [5]) # !\sel~dataout [2] & (\b~35_combout )

	.dataa(\a~dataout [5]),
	.datab(\sel~dataout [2]),
	.datac(\b~35_combout ),
	.datad(\a~dataout [7]),
	.aclr(gnd),
	.aload(gnd),
	.clk(gnd),
	.cin(gnd),
	.cascin(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.combout(\b~36_combout ),
	.regout(),
	.cout(),
	.cascout());
// synopsys translate_off
defparam \b~36 .clock_enable_mode = "false";
defparam \b~36 .lut_mask = "f838";
defparam \b~36 .operation_mode = "normal";
defparam \b~36 .output_mode = "comb_only";
defparam \b~36 .packed_mode = "false";
// synopsys translate_on

// atom is at PIN_92
flex10ke_io \a[4]~I (
	.datain(gnd),
	.clk(gnd),
	.ena(vcc),
	.aclr(gnd),
	.oe(gnd),
	.devclrn(devclrn),
	.devpor(devpor),
	.devoe(devoe),
	.dataout(\a~dataout [4]),
	.padio(a[4]));
// synopsys translate_off
defparam \a[4]~I .feedback_mode = "from_pin";
defparam \a[4]~I .operation_mode = "input";
defparam \a[4]~I .reg_source_mode = "none";
// synopsys translate_on

// atom is at PIN_19
flex10ke_io \a[0]~I (
	.datain(gnd),
	.clk(gnd),
	.ena(vcc),
	.aclr(gnd),
	.oe(gnd),
	.devclrn(devclrn),
	.devpor(devpor),
	.devoe(devoe),
	.dataout(\a~dataout [0]),
	.padio(a[0]));
// synopsys translate_off
defparam \a[0]~I .feedback_mode = "from_pin";
defparam \a[0]~I .operation_mode = "input";
defparam \a[0]~I .reg_source_mode = "none";
// synopsys translate_on

// atom is at LC4_D7
flex10ke_lcell \b~37 (
// Equation(s):
// \b~37_combout  = \sel~dataout [1] & (\sel~dataout [2]) # !\sel~dataout [1] & (\sel~dataout [2] & \a~dataout [4] # !\sel~dataout [2] & (\a~dataout [0]))

	.dataa(\sel~dataout [1]),
	.datab(\a~dataout [4]),
	.datac(\sel~dataout [2]),
	.datad(\a~dataout [0]),
	.aclr(gnd),
	.aload(gnd),
	.clk(gnd),
	.cin(gnd),
	.cascin(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.combout(\b~37_combout ),
	.regout(),
	.cout(),
	.cascout());
// synopsys translate_off
defparam \b~37 .clock_enable_mode = "false";
defparam \b~37 .lut_mask = "e5e0";
defparam \b~37 .operation_mode = "normal";
defparam \b~37 .output_mode = "comb_only";
defparam \b~37 .packed_mode = "false";
// synopsys translate_on

// atom is at PIN_90
flex10ke_io \a[6]~I (
	.datain(gnd),
	.clk(gnd),
	.ena(vcc),
	.aclr(gnd),
	.oe(gnd),
	.devclrn(devclrn),
	.devpor(devpor),
	.devoe(devoe),
	.dataout(\a~dataout [6]),
	.padio(a[6]));
// synopsys translate_off
defparam \a[6]~I .feedback_mode = "from_pin";
defparam \a[6]~I .operation_mode = "input";
defparam \a[6]~I .reg_source_mode = "none";
// synopsys translate_on

// atom is at LC5_D7
flex10ke_lcell \b~38 (
// Equation(s):
// \b~38_combout  = \sel~dataout [1] & (\b~37_combout  & (\a~dataout [6]) # !\b~37_combout  & \a~dataout [2]) # !\sel~dataout [1] & (\b~37_combout )

	.dataa(\a~dataout [2]),
	.datab(\sel~dataout [1]),
	.datac(\b~37_combout ),
	.datad(\a~dataout [6]),
	.aclr(gnd),
	.aload(gnd),
	.clk(gnd),
	.cin(gnd),
	.cascin(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.combout(\b~38_combout ),
	.regout(),
	.cout(),
	.cascout());
// synopsys translate_off
defparam \b~38 .clock_enable_mode = "false";
defparam \b~38 .lut_mask = "f838";
defparam \b~38 .operation_mode = "normal";
defparam \b~38 .output_mode = "comb_only";
defparam \b~38 .packed_mode = "false";
// synopsys translate_on

// atom is at PIN_21
flex10ke_io \sel[0]~I (
	.datain(gnd),
	.clk(gnd),
	.ena(vcc),
	.aclr(gnd),
	.oe(gnd),
	.devclrn(devclrn),
	.devpor(devpor),
	.devoe(devoe),
	.dataout(\sel~dataout [0]),
	.padio(sel[0]));
// synopsys translate_off
defparam \sel[0]~I .feedback_mode = "from_pin";
defparam \sel[0]~I .operation_mode = "input";
defparam \sel[0]~I .reg_source_mode = "none";
// synopsys translate_on

// atom is at LC3_D7
flex10ke_lcell \b~39 (
// Equation(s):
// \b~39_combout  = \sel~dataout [0] & \b~36_combout  # !\sel~dataout [0] & (\b~38_combout )

	.dataa(vcc),
	.datab(\b~36_combout ),
	.datac(\b~38_combout ),
	.datad(\sel~dataout [0]),
	.aclr(gnd),
	.aload(gnd),
	.clk(gnd),
	.cin(gnd),
	.cascin(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.combout(\b~39_combout ),
	.regout(),
	.cout(),
	.cascout());
// synopsys translate_off
defparam \b~39 .clock_enable_mode = "false";
defparam \b~39 .lut_mask = "ccf0";
defparam \b~39 .operation_mode = "normal";
defparam \b~39 .output_mode = "comb_only";
defparam \b~39 .packed_mode = "false";
// synopsys translate_on

// atom is at PIN_91
flex10ke_io \b~I (
	.datain(\b~39_combout ),
	.clk(gnd),
	.ena(vcc),
	.aclr(gnd),
	.oe(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.devoe(devoe),
	.dataout(),
	.padio(b));
// synopsys translate_off
defparam \b~I .feedback_mode = "none";
defparam \b~I .operation_mode = "output";
defparam \b~I .reg_source_mode = "none";
// synopsys translate_on

endmodule
